---

# Traductor de Lengua de Signos (LSE) y Voz a Texto

Un proyecto de visi√≥n por computadora y reconocimiento de voz que traduce gestos del abecedario de la Lengua de Signos Espa√±ola (LSE) y transcribe audio a texto en tiempo real.

## üìù Descripci√≥n

Este proyecto presenta una aplicaci√≥n multifuncional que utiliza la c√°mara y el micr√≥fono de un ordenador para facilitar la comunicaci√≥n a trav√©s de dos modos principales:

1.  **Traducci√≥n de Signos a Texto**: Interpreta en tiempo real los gestos de la mano correspondientes a las letras del abecedario de la LSE y los muestra como texto en pantalla.
2.  **Transcripci√≥n de Voz a Texto**: Captura audio a trav√©s del micr√≥fono y lo convierte en texto.

La aplicaci√≥n permite al usuario alternar entre estos dos modos de forma fluida con solo pulsar una tecla.

## ‚ú® Caracter√≠sticas

* **Reconocimiento de LSE en tiempo real**: Utiliza la librer√≠a MediaPipe para detectar los puntos de referencia de la mano y un sistema de reglas para clasificar las letras.
* **Transcripci√≥n de Voz**: Integra la librer√≠a `SpeechRecognition` para realizar la conversi√≥n de voz a texto en espa√±ol.
* **Interfaz Visual Interactiva**: Muestra la se√±al de v√≠deo de la c√°mara, superponiendo el esqueleto de la mano detectada para proporcionar feedback visual al usuario.
* **Modo Dual**: Permite cambiar f√°cilmente entre el modo de reconocimiento de signos y el de voz.

## üõ†Ô∏è Requisitos e Instalaci√≥n

Para ejecutar este proyecto, necesitas Python 3 y las siguientes librer√≠as.

* `opencv-python`
* `mediapipe`
* `speechrecognition`
* `pyaudio`

Puedes instalar todas las dependencias ejecutando el siguiente comando en tu terminal:

```bash
pip install opencv-python mediapipe SpeechRecognition pyaudio
```

## üöÄ Uso y Controles

1.  **Ejecutar la aplicaci√≥n**:
    Abre una terminal, navega hasta el directorio del proyecto y ejecuta:
    ```bash
    python pruebaDetectarManos_app.py
    ```
2.  **Controles del Programa**:
    * `'m'` / `'M'`: Pulsa la tecla 'm' para **alternar** entre el modo "Signos a Texto" y "Voz a Texto".
    * `Barra Espaciadora`: En el modo "Voz a Texto", p√∫lsala para **iniciar la escucha**.
    * `Esc`: Pulsa la tecla 'Escape' para **cerrar la aplicaci√≥n**.

## üìÇ Estructura del Proyecto

* `pruebaDetectarManos_app.py`: El script principal que ejecuta la aplicaci√≥n. Gestiona la captura de v√≠deo, la interfaz de usuario y la l√≥gica de los modos.
* `entrenamiento.py`: Contiene la l√≥gica de decisi√≥n (`letra_leida`) para identificar qu√© letra del LSE se est√° representando seg√∫n la geometr√≠a de la mano.
* `calculoDeDistancias.py`: M√≥dulo con funciones de ayuda para calcular distancias, determinar la orientaci√≥n de la mano y el estado de los dedos.
* `pruebamicros.py`: Un script de utilidad para listar los micr√≥fonos disponibles en tu sistema y sus correspondientes √≠ndices.

## üé§ Configuraci√≥n del Micr√≥fono

Si el reconocimiento de voz no funciona, puede que est√© utilizando el dispositivo de entrada incorrecto. Sigue estos pasos para solucionarlo:

1.  Ejecuta el script `pruebamicros.py` para ver una lista de tus micr√≥fonos y sus √≠ndices de dispositivo.
    ```bash
    python pruebamicros.py
    ```
2.  El resultado ser√° algo como: `1: Micr√≥fono Externo (2 canales)`. Anota el n√∫mero (√≠ndice) de tu micr√≥fono.

3.  Abre el fichero `pruebaDetectarManos_app.py` en un editor.

4.  Localiza la l√≠nea donde se inicializa el micr√≥fono (aproximadamente la l√≠nea 32).
    ```python
    mic = sr.Microphone()
    ```
5.  Modif√≠cala para a√±adir el `device_index` que anotaste. Por ejemplo, si tu micr√≥fono es el dispositivo 1:
    ```python
    mic = sr.Microphone(device_index=1)
    ```
6.  Guarda los cambios y vuelve a ejecutar la aplicaci√≥n. El reconocimiento de voz ahora deber√≠a utilizar el micr√≥fono correcto.